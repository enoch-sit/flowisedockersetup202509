services:
  postgres:
    image: postgres:16-alpine
    container_name: flowise-postgres
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d
    networks:
      - flowise-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  flowise:
    image: flowiseai/flowise:latest
    container_name: flowise
    restart: on-failure
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATABASE_TYPE: postgres
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_USER: ${POSTGRES_USER}
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
      DATABASE_NAME: ${POSTGRES_DB}
      API_BASE_PATH: /flowise
      VITE_APP_BASE_PATH: /flowise
      FLOWISE_USERNAME: ${FLOWISE_USERNAME}
      FLOWISE_PASSWORD: ${FLOWISE_PASSWORD}
      FLOWISE_SECRETKEY_OVERWRITE: ${FLOWISE_SECRETKEY_OVERWRITE}
      PORT: 3000
      FLOWISE_FILE_SIZE_LIMIT: 50mb
    volumes:
      - flowise_data:/root/.flowise
    ports:
      - "3000:3000"
    networks:
      - flowise-network
    entrypoint: sh -c 'echo "Received arguments:"; echo "Arg 0: $0"; echo "Arg 1: $1"; echo "Arg 2: $2";'

networks:
  flowise-network:
    driver: bridge

volumes:
  postgres_data:
  flowise_data:
